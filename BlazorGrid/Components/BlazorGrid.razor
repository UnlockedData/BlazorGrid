@typeparam TRow
@using Microsoft.AspNetCore.Components.Web.Virtualization
@if (DetectColumns)
{
    <BlazorGrid.Infrastructure.ColumnBuffer TRow="TRow" OnColumnsChanged="OnColumnsChanged">
        @ChildContent(GetEmptyRow())
    </BlazorGrid.Infrastructure.ColumnBuffer>
}
@if (Columns.Any())
{
    <form>
        <div class="table-responsive blazor-grid" style="max-height: @ViewPortHeight">
        <table class="table" style="overflow-y: auto; max-height: inherit; min-height: inherit;">
            <thead class="sticky-top" style="background-color: white;">
            <tr>
                @foreach (var col in Columns)
                {
                    var isSorted = IsSortedBy(col);
                    var sortable = col.For != null;
                    var cls = col.CssClass;

                    if (sortable)
                    {
                        cls += " sortable";

                        if (isSorted)
                        {
                            cls += " sorted";
                        }
                    }
                    <th scope="col" @onclick="() => TryApplySortingAsync(col)" class="@cls">
                        @if (!col.AlignRight)
                        {
                            @col.GetCaptionOrDefault()
                        }
                        @if (sortable)
                        {
                            <span class="@ColHeaderSortIconCssClass(col)"></span>
                        }
                        @if (col.AlignRight)
                        {
                            @col.GetCaptionOrDefault()
                        }
                    </th>
                }
            </tr>
            </thead>
            @if (TotalRowCount == 0 || Provider is null)
            {

                <div class="@Config.Styles.PlaceholderWrapperClass">
                    <h5 class="@Config.Styles.NoDataHeadingClass">@Resources.Empty_Title</h5>
                    @if (string.IsNullOrEmpty(Query))
                    {
                        <p class="@Config.Styles.NoDataTextClass">@Resources.Empty_Text</p>
                    }
                    else
                    {
                        <p class="@Config.Styles.NoDataTextClass">@Resources.Empty_Text_Filtered</p>
                    }
                </div>

            }
            else
            {
                <tbody>
                <Virtualize @ref="VirtualizeRef" ItemsProvider="GetItemsVirtualized" >
                    @{
                        var cls = "grid-row";

                        if (OnClick.HasDelegate || Href != null)
                        {
                            cls += " " + Config.Styles.RowClickableClass;
                        }

                        if (HighlightedRowIndex == context.Index)
                        {
                            cls += " " + Config.Styles.RowHighlightedClass;
                        }
                    }
                    <tr class="@cls"
                        @onclick="_ => OnRowClicked(context)">

                        @ChildContent(context.Row)
                    </tr>

                </Virtualize>
                </tbody>

            }
        </table>
        </div>
    </form>

}